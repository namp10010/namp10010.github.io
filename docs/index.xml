<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on namp10010</title>
    <link>https://namp10010.github.io/docs/</link>
    <description>Recent content in Blog on namp10010</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 14 Feb 2021 08:00:00 +1100</lastBuildDate><atom:link href="https://namp10010.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang JWT Authorisation</title>
      <link>https://namp10010.github.io/docs/go-jwt/</link>
      <pubDate>Sun, 14 Feb 2021 08:00:00 +1100</pubDate>
      
      <guid>https://namp10010.github.io/docs/go-jwt/</guid>
      <description>A simple golang implementation of JWT JSON Web Tokens authorisation.
This code will demo how JWT is used to authorise user and return their resource access scopes.
For the sake of the test a new pair of keys will be generated every time and can be discarded.
Due to the demo nature of this code, it is understood that the whole flow has been over-simplified. Generally, the architecture would be that the functionalities are broken into multiple APIs for authenticating user and authenticating JWT.</description>
    </item>
    
    <item>
      <title>Golang fluent pattern</title>
      <link>https://namp10010.github.io/docs/fluent-pattern-golang/</link>
      <pubDate>Sat, 24 Oct 2020 07:30:00 +1100</pubDate>
      
      <guid>https://namp10010.github.io/docs/fluent-pattern-golang/</guid>
      <description>Simple implementation of fluent pattern in Go.
Constructor style The gist of fluent pattern is returning the same object over and over again.
type email struct { from string to string subject string body string } func (e *email) withFrom(fr string) *email { e.from = fr return e } func (e *email) withTo(to string) *email { e.to = to return e } func (e *email) withSubject(s string) *email { e.subject = s return e } func (e *email) withBody(b string) *email { e.</description>
    </item>
    
    <item>
      <title>Github Codespaces impression and hugo </title>
      <link>https://namp10010.github.io/docs/github-codespaces-impression/</link>
      <pubDate>Sun, 18 Oct 2020 22:00:00 +1100</pubDate>
      
      <guid>https://namp10010.github.io/docs/github-codespaces-impression/</guid>
      <description>I just noticed that I got the beta access to Codespaces and decided to try it out. I am writing this post using VS Code from Codespaces. My intension is to see if I can develop and test the flow for gohugo static web creation. First impression, the loading time wasn&amp;rsquo;t too bad. However, once loaded it didn&amp;rsquo;t even feel like I am coding on a remote IDE.
To my surprise, Codespace - which is a linux with GUI - comes loaded with a bunc of development tools including my new toy hugo.</description>
    </item>
    
    <item>
      <title>How to auto deploy Hugo contents with Github action</title>
      <link>https://namp10010.github.io/docs/hugo-github-action/</link>
      <pubDate>Sun, 18 Oct 2020 10:00:00 +1100</pubDate>
      
      <guid>https://namp10010.github.io/docs/hugo-github-action/</guid>
      <description>In this quick tutorial, we will automate the deployment of Hugo generated static web contents to a github page using github action.
Prerequisites   A main repo blog which is a Hugo web repo. This is where the github action will be set up
  Generated static contents in public/ which is a git submodule which points to a github user page
git submodule add https://github.com/namp10010/namp10010.github.io.git public Follow Setup github user page to create your own user page.</description>
    </item>
    
  </channel>
</rss>
